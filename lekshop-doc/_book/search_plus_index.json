{"./":{"url":"./","title":"项目介绍","keywords":"","body":"项目介绍 LEKSHOP B2B2C商城系统 LEKSHOP商城系统支持商家入驻，后端基于SpringBoot 研发，前端使用 Vue、uniapp开发，购买产品后系统全端全部代码开源 商城前后端分离，支持分布式部署，支持Docker，各个API独立，并且有独立的消费者。 体验 公众号/小程序/APP 体验，扫描二维码 官网: https://www.lekshop.cn PS：手机验证码为 ‘131415’ 平台管理端：http://admin.lekshop.cn 账号：admin/a123123 店铺管理端：http://shop.lekshop.cn 账号：13444555666/123456 商城H5网页：http://m.lekshop.cn 账号：13666011848/123456 商城 小程序/公众号/APP：扫描二维码 技术选型 后台技术选型 说明 框架 说明 基础框架 Spring Boot MVC框架 Spring MVC 持久框架 Mybatis-Plus 程序构建 Maven 关系型数据库 MySQL 消息中间件AMQP RocketMQ 缓存 Redis 搜索引擎 Elasticsearch 安全框架 Spring Security 数据库连接池 Druid 数据库分库分表 sharding 定时任务 xxl-job 负载均衡 Nginx 静态资源 阿里云OSS 短信 阿里云短信 认证 JWT 日志处理 Log4j 接口规范 RESTful 前端-运营后台、店铺后台 说明 框架 说明 框架 构建工具 webpack JS版本 ES6 基础JS框架 Vue.js 视频播放器 Dplayer 路由管理 Vue Router 状态管理 Vuex 基础UI库 Element-UI UI界面基于 Element-UI 网络请求 axios 前端-移动端 说明 架构 说明 架构 基础UI库 无 基础框架 uni-app CSS预处理 scss 地图引擎 amap 开源须知 1.仅允许用于个人学习研究使用. 2.禁止将本开源的代码和资源进行任何形式任何名义的出售. 3.软件受国家计算机软件著作权保护。 4.限制商用，如果需要商业使用请联系我们。 码刀科技（www.lekshop.cn）是国内知名企业级电商平台提供商，为企业级商家提供最佳的电商平台搭建（多种模式电商平台搭建：B2B/B2B2C/B2C/O2O/新零售/跨境等）、平台管理系统开发及互联网采购解决方案服务, 联系客服了解更多. Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:29:06 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"PROBLEM.html":{"url":"PROBLEM.html","title":"常见问题","keywords":"","body":"常见问题 解决问题究极方法 将报错信息最根源的问题，放到百度/谷歌/bing 等网站，进行简单的搜索，可以解决百分之80的问题。 后端如何配置各种链接 本地运行时，更改根目录的 config目录下的 application-dev.yml。 SQL在哪里 在项目的doc文件夹 Docker镜像端口号如何设置 群友反馈端口号没有映射，无法访问。 解释这个问题需要先了解docker 的网络模式的区别： 安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host host：容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。 Container：创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围。 None：该模式关闭了容器的网络功能。 Bridge：此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。 完整的解释https://www.cnblogs.com/zuxing/articles/8780661.html 示例中应用的镜像脚本，网络模型都是host，所以它采用的是宿主机的端口，所以无法看到映射内容。 Docker API 没有dockerfile如何打包？ 使用的是maven打包插件，执行命令即可 mvn clean package docker:build -DskipTests -DpushImage Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 15:16:21 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"deploy/READY.html":{"url":"deploy/READY.html","title":"部署准备","keywords":"","body":"部署准备 上线准备 一套完整的域名（PC端、移动端、商家端、管理端、以及4个API端） ssl证书 域名备案 微信支付参数 微信小程序参数 七牛云参数 阿里云短信参数 快递鸟物流查询参数 最低服务器配置 4核8G内存服务器一台（推荐使用 CentOS 7.6 64位）（如果基础中间件使用外部服务器的，则可以适量减少内存） 环境准备 jdk >= 1.8 Mysql 8.x.x Redis >= 6.2.5 nginx 1.22.0 以上环境为演示站点环境，尽可能使用同一版本 docker-compose环境安装（如果自行部署基础中间件，则可以略过这里，这里主要安装基础中间件） 安装docker-compose环境(已经安装的可以略过) Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 15:28:44 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"deploy/CODE.html":{"url":"deploy/CODE.html","title":"部署程序","keywords":"","body":"部署程序 新建数据库 mysql环境安装完成后, 将document文件夹里面的 lekshop.sql 和 schedule.sql分别导入 后端代码打包 1. 需要部署的代码项目为 lekshop-admin 运营后台 lekshop-shop 商家后台 lekshop-portal 买家前台 lekshop-netty Im聊天框架 2. 在代码根目录执行 mvn install , 执行成功后, 在以上四个项目中的target的.jar包上传到服务器 3. 执行命令 nohup java -jar /jar/lekshop-admin-1.0-SNAPSHOT.jar --server.port=7073 --spring.profiles.active=prod & nohup java -jar /jar/lekshop-shop-1.0-SNAPSHOT.jar --server.port=7074 --spring.profiles.active=prod & nohup java -jar /jar/lekshop-portal-1.0-SNAPSHOT.jar --server.port=7076 --spring.profiles.active=prod & nohup java -jar /jar/lekshop-netty-1.0-SNAPSHOT.jar & 4. 项目启动成功 前端代码打包 使用的前后端分离, 所以对应的前端项目有如下三个 1. lekshop_ui_admin 运营后台前端项目 2. lekshop_ui_shop 商家后台前端项目 3. lekshop_ui_portal 买家前台uniapp项目 前两个项目使用Hbuilder打开, .env.production相关参数的配置后, 执行一下命令打包 npm run build:prod 打包成功后会在项目生成dist文件夹, 里面就是要上传服务器的html文件 关于uniapp项目如何打包成小程序, H5, APP, 可自行百度 域名解析(以下是演示站nginx的解析配置, 仅做参考) #user nobody; worker_processes 2; #error_log logs/error.log #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 10240; } http { proxy_connect_timeout 10; proxy_read_timeout 180; proxy_send_timeout 5; #proxy_buffer_size 16k; #proxy_buffers 4 32k; #proxy_busy_buffers_size 96k; #proxy_temp_file_write_size 96k; #proxy_temp_path C:/java/nginx-1.8.0/temp; #proxy_cache_path C:/java/nginx-1.8.0/temp/cache levels=1:2 keys_zone=cache_one:500m inactive=1d max_size=10g; server_names_hash_bucket_size 64; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; client_max_body_size 20m; gzip on; gzip_min_length 1k; gzip_http_version 1.0; gzip_disable \"MSIE [1-6].\"; gzip_comp_level 5; gzip_types text/plain application/x-javascript text/css text/javascript application/javascript application/json; upstream websocket{ server 127.0.0.1:8008; } server { listen 80; server_name adminapi.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://127.0.0.1:7073/; proxy_set_header Host $host:80; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } server { listen 80; server_name admin.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { root /www/lekshop/admin_ui/; index index.html; } } server { listen 80; server_name shopapi.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://127.0.0.1:7074/; proxy_set_header Host $host:80; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } server { listen 80; server_name shop.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { root /www/lekshop/shop_ui/; index index.html; } } server { listen 80; server_name portalapi.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://127.0.0.1:7076/; proxy_set_header Host $host:80; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } server { listen 443 ssl; server_name portalapi.lekshop.cn; ssl_certificate ../cert/7922963_portalapi.lekshop.cn.pem; ssl_certificate_key ../cert/7922963_portalapi.lekshop.cn.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; #charset koi8-r; #access_log logs/host.access.log main; location / { proxy_pass http://127.0.0.1:7076/; proxy_set_header Host $host:80; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } server { listen 80; server_name m.lekshop.cn; #charset koi8-r; #access_log logs/host.access.log main; location / { root /www/lekshop/portal_ui/; index index.html; } } server { listen 443 ssl; server_name socket.lekshop.cn; ssl_certificate ../cert/7924395_socket.lekshop.cn.pem; ssl_certificate_key ../cert/7924395_socket.lekshop.cn.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { proxy_pass http://websocket; #代理到上面的地址去 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; } } } 启动nginx service nginx restart Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:00:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"use/PROBLEM.html":{"url":"use/PROBLEM.html","title":"常见问题","keywords":"","body":"常见问题 使用常见问题 后台修改了分类，但是PC前台展示的分类并没有更新？ 前端对分类进行了缓存，半小时会进行刷新。 如果您想立即查看效果，可以去删除缓存。 为什么添加分类后，店铺发布商品看不到此分类？ 店铺发布商品是根据经营类目进行发布的。 经营类目为商品一级分类。 可以去运营后台-店铺-店铺列表-修改-经营类目，进行添加店铺的经营类目。 店铺与平台是如何结算的？ 店铺与平台按照结算单进行结算。 店铺结算单的生成规则是在：店铺详情中进行设置结算日。 每个月按照结算日生成结算单。例如写：1、15，每个月会生成两份结算单。 结算单流程：生成结算单 - 店铺对账 - 平台付款 - 完成。 结算方式为：线下支付。如果需要线上结算，自行去对接分账支付接口即可。 哪些促销由店铺添加，哪些促销由平台添加？ 店铺促销：店铺优惠券、满额活动、拼团活动、秒杀活动。 平台促销：平台优惠券、积分商品。 为什么商品列表按照规格（SKU）展示，不是按照商品（SPU）展示？ 举一个例子，如果一个商品设置了两个规格。 促销活动是按照规格进行设置的。 如果按照商品展示，商品列表没办法展示促销信息（举例：秒杀），所以程序设计是按照规格进行展示。 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:02:53 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"kaifa/JAVA.html":{"url":"kaifa/JAVA.html","title":"后端开发规范","keywords":"","body":"后端开发规范 默认规约 与阿里巴巴java规约一致，如果有需要，可以在idea中以及类似ide中下载对应的阿里巴巴规约 规范扩展 类名使用 UpperCamelCase 风格：第一个词的首字母，以及后面每个词的首字母都大写 方法名使用lowerCamelCase风格：第一个词的首字母小写，后面每个词的首字母大写。 常量命名全部大写，单词间用下划线隔开。 控制器需以：Controller结尾，例如：GoodsController。 业务层需以Service结尾，例如：GoodsService。 Mapper需以Mapper结尾，例如：GoodsMapper。 注释模板 类注释模板 /** * @title {类内容} * @author {作者} * @date {date} */ 方法注释模板 /** * {方法描述} * @author {作者} * @date {date} * @param {参数} * @return {返回值} */ 业务层需以Service结尾，例如：GoodsService。 Mapper需以Mapper结尾，例如：GoodsMapper。 模型命名规范 i. 在lekshop-mbg 目录下的类，即为数据库模型，默认无后缀命名，例如Goods ii. 在domain.result 目录下的类，即为响应数据模型，默认后缀Result命名，例如GoodsResult，通常情况用于服务端给前端的响应 iii. 在domain.form 目录下的类，即为传递数据模型，默认后缀Form命名，例如GoodsForm，通常情况用于前后端，或者服务于服务之间交互的数据模型 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:12:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"kaifa/CONTROLLER.html":{"url":"kaifa/CONTROLLER.html","title":"控制器开发规范","keywords":"","body":"控制器开发规范 控制器注解引入 @RestController：标注类为Restful规范的控制器。 @RequestMapping：请求路径，需遵守Restful规范。 设定请求方式 ​ - 查询方法：@GetMapping ​ - 添加：@PostMapping ​ - 删除：@DeleteMapping ​ 入参设计 入参需以lowerCamelCase风格命名。 设定请求参数方式 表单提交：直接使用VO类或具体参数名接收。 @PathVariable：路径变量。 @RequestParam：参数请求。 校验请求参数 非空：@NotNull(message = \"XXX\")。 使用注解@Validated，使得参数自动校验生效，它是spring-contex中的注解。 对象可在变量上进行定义。 方法返回 查询、修改、添加返回：操作后的对象。 其他业务操作返回：操作状态。 返回对象：CommonResult.success(返回对象); 操作成功： CommonResult.success(\"返回内容\"); 操作失败：CommonResult.fail(\"返回内容\"); 自动生成接口文档 使用SwaggerAPI。 @Api()：添加在类名之上，标注控制器实现内容。 @ApiOperation(value = \"XX\")：添加方法名上，标注方法实现内容。 @ApiImplicitParams、@ApiImplicitParam：添加方法名上，标注参数内容。 Controller示例代码：@ApiOperation(value = \"商品拼团成员列表\") @ApiImplicitParams({ @ApiImplicitParam(name = \"goodsId\", value = \"商品ID\"), }) @ResponseBody @GetMapping(value=\"/goods/getGroupList\") public CommonResult> getGroupList(Integer goodsId, Integer page, Integer pageSize) { OrderGroupSearchForm form = new OrderGroupSearchForm(); form.setGoodsId(goodsId); form.setStatus(1); List groupList = orderGroupService.getOrderGroupList(form, page, pageSize); return CommonResult.success(CommonPage.restPage(groupList)); } Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:21:14 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"kaifa/VUE.html":{"url":"kaifa/VUE.html","title":"前端开发规范","keywords":"","body":" 前端 JS 项目开发规范 规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都是愉悦的，大家在一起是快乐的。 引自《阿里规约》的开头片段： ----现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。 一、编程规约 (一)命名规范 1.1.1 项目命名 全部采用小写方式， 以中划线分隔。 正例：mall-management-system 反例：mall_management-system / mallManagementSystem 1.1.2 目录命名 全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数 正例： scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc 反例： script / style / demo_scripts / demoStyles / imgs / docs 【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名 正例： head-search / page-loading / authorized / notice-icon 反例： HeadSearch / PageLoading 【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名 正例： page-one / shopping-car / user-management 反例： ShoppingCar / UserManagement 1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名 全部采用小写方式， 以中划线分隔 正例： render-dom.js / signup.css / index.html / company-logo.png 反例： renderDom.js / UserManagement.html 1.1.4 命名严谨性 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用 正例：henan / luoyang / rmb 等国际通用的名称，可视同英文。 反例：DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3 杜绝完全不规范的缩写，避免望文不知义： 反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。 (二)HTML 规范 （Vue Template 同样适用） 1.2.1 HTML 类型 推荐使用 HTML5 的文档类型申明： . （建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。 规定字符编码 IE 兼容模式 规定字符编码 doctype 大写 正例： Page title 1.2.2 缩进 缩进使用 4 个空格（一个 tab） 嵌套的节点应该缩进。 1.2.3 分块注释 在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式 1.2.4 语义化标签 HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签 正例 反例 1.2.5 引号 使用双引号(\" \") 而不是单引号(’ ') 。 正例： \"header\" 反例： 'header' (三) CSS 规范 1.3.1 命名 类名使用小写字母，以中划线分隔 id 采用驼峰式命名 scss 中的变量、函数、混合、placeholder 采用驼峰式命名 ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称 不推荐： .fw-800 { font-weight: 800; } .red { color: red; } 推荐: .heavy { font-weight: 800; } .important { color: red; } 1.3.2 选择器 1)css 选择器中避免使用标签名 从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。 2)很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。 不推荐: .content .title { font-size: 2rem; } 推荐: .content > .title { font-size: 2rem; } 1.3.3 尽量使用缩写属性 不推荐： border-top-style: none; font-family: palatino, georgia, serif; font-size: 100%; line-height: 1.6; padding-bottom: 2em; padding-left: 1em; padding-right: 1em; padding-top: 0; 推荐： border-top: 0; font: 100%/1.6 palatino, georgia, serif; padding: 0 1em 2em; 1.3.4 每个选择器及属性独占一行 不推荐： button{ width:100px;height:50px;color:#fff;background:#00a0e9; } 推荐： button{ width:100px; height:50px; color:#fff; background:#00a0e9; } 1.3.5 省略0后面的单位 不推荐： div{ padding-bottom: 0px; margin: 0em; } 推荐： div{ padding-bottom: 0; margin: 0; } 1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式 不推荐： header{ padding-bottom: 0px; margin: 0em; } 推荐： .header{ padding-bottom: 0px; margin: 0em; } (四) LESS 规范 1.4.1 代码组织 1)将公共less文件放置在style/less/common文件夹 例:// color.less,common.less 2)按以下顺序组织 1、@import; 2、变量声明; 3、样式声明; @import \"mixins/size.less\"; @default-text-color: #333; .page { width: 960px; margin: 0 auto; } 1.4.2 避免嵌套层级过多 将嵌套深度限制在3级。对于超过4级的嵌套，给予重新评估。这可以避免出现过于详实的CSS选择器。 避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于20行的嵌套规则出现 不推荐： .main{ .title{ .name{ color:#fff } } } 推荐： .main-title{ .name{ color:#fff } } (五) Javascript 规范 1.5.1 命名 1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束 反例： _name / name_ / name$ 2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。 正例： localValue / getHttpMessage() / inputUserId 其中 method 方法命名必须是 动词 或者 动词+名词 形式\\ 正例：saveShopCarData /openShopCarInfoDialog 反例：save / open / show / go 特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端） add / update / delete / detail / get **附： 函数方法常用的动词:** get 获取/set 设置, add 增加/remove 删除 create 创建/destory 移除 start 启动/stop 停止 open 打开/close 关闭, read 读取/write 写入 load 载入/save 保存, create 创建/destroy 销毁 begin 开始/end 结束, backup 备份/restore 恢复 import 导入/export 导出, split 分割/merge 合并 inject 注入/extract 提取, attach 附着/detach 脱离 bind 绑定/separate 分离, view 查看/browse 浏览 edit 编辑/modify 修改, select 选取/mark 标记 copy 复制/paste 粘贴, undo 撤销/redo 重做 insert 插入/delete 移除, add 加入/append 添加 clean 清理/clear 清除, index 索引/sort 排序 find 查找/search 搜索, increase 增加/decrease 减少 play 播放/pause 暂停, launch 启动/run 运行 compile 编译/execute 执行, debug 调试/trace 跟踪 observe 观察/listen 监听, build 构建/publish 发布 input 输入/output 输出, encode 编码/decode 解码 encrypt 加密/decrypt 解密, compress 压缩/decompress 解压缩 pack 打包/unpack 解包, parse 解析/emit 生成 connect 连接/disconnect 断开, send 发送/receive 接收 download 下载/upload 上传, refresh 刷新/synchronize 同步 update 更新/revert 复原, lock 锁定/unlock 解锁 check out 签出/check in 签入, submit 提交/commit 交付 push 推/pull 拉, expand 展开/collapse 折叠 begin 起始/end 结束, start 开始/finish 完成 enter 进入/exit 退出, abort 放弃/quit 离开 obsolete 废弃/depreciate 废旧, collect 收集/aggregate 聚集 3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 正例： MAX_STOCK_COUNT 反例： MAX_COUNT 1.5.2 代码格式 1) 使用 4 个空格进行缩进 正例： if (x 2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。 > 说明：任何情形，没有必要插入多个空行进行隔开。 1.5.3 字符串 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处： 正例: let str = 'foo'; let testDiv = ' '; 反例: let str = 'foo'; let testDiv = \" \"; 1.5.4 对象声明 1)使用字面值创建对象 正例： let user = {}; 反例： let user = new Object(); 2) 使用字面量来代替对象构造器 正例： ```javascript var user = { age: 0, name: 1, city: 3 }; 反例： var user = new Object(); user.age = 0; user.name = 0; user.city = 0; 1.5.5 使用 ES6,7 必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。 必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async ， 解构， let ， for…of 等等 1.5.6 括号 下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。 正例： if (condition) { doSomething(); } 反例： if (condition) doSomething(); 1.5.7 undefined 判断 永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。 正例： if (typeof person === 'undefined') { ... } 反例： if (person === undefined) { ... } 1.5.8 条件判断和循环最多三层 条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。 1.5.9 this 的转换命名 对上下文 this 的引用只能使用’self’来命名 1.5.10 慎用 console.log 因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能 二、Vue 项目规范 (一) Vue 编码基础 vue 项目规范以 Vue 官方规范 （https://cn.vuejs.org/v2/style-guide/） 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。 请仔仔细细阅读 Vue 官方规范，切记，此为第一步。 2.1.1. 组件规范 1) 组件名为多个单词。 组件名应该始终是多个单词组成（大于等于 2），且命名规范为KebabCase格式。 这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。 正例： export default { name: 'TodoItem' // ... }; 反例： export default { name: 'Todo', // ... } export default { name: 'todo-item', // ... } 2) 组件文件名为 pascal-case 格式 正例： components/ |- my-component.vue 反例： components/ |- myComponent.vue |- MyComponent.vue 3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。 正例： components/ |- base-button.vue |- base-table.vue |- base-icon.vue 反例： components/ |- MyButton.vue |- VueTable.vue |- Icon.vue 4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名 正例： components/ |- todo-list.vue |- todo-list-item.vue |- todo-list-item-button.vue |- user-profile-options.vue （完整单词） 反例： components/ |- TodoList.vue |- TodoItem.vue |- TodoButton.vue |- UProfOpts.vue （使用了缩写） 5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。 正例： 反例： 6) 组件的 data 必须是一个函数 当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。 正例： export default { data () { return { name: 'jack' } } } 反例： export default { data: { name: 'jack' } } 7) Prop 定义应该尽量详细 必须使用 camelCase 驼峰命名 必须指定类型 必须加上注释，表明其含义 必须加上 required 或者 default，两者二选其一 如果有业务需要，必须加上 validator 验证 正例： props: { // 组件状态，用于控制组件的颜色 status: { type: String, required: true, validator: function (value) { return [ 'succ', 'info', 'error' ].indexOf(value) !== -1 } }, // 用户级别，用于显示皇冠个数 userLevel：{ type: String, required: true } } 8) 为组件样式设置作用域 正例： X scoped 特性 --> .btn-close { background-color: red; } 反例： X .btn-close { background-color: red; } 9) 如果特性元素较多，应该主动换行。 正例： 反例： 2.1.2. 模板中使用简单的表达式 组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。 正例： // 复杂表达式已经移入一个计算属性 computed: { normalizedFullName: function () { return this.fullName.split(' ').map(function (word) { return word[0].toUpperCase() + word.slice(1) }).join(' ') } } 2.1.3 指令都使用缩写形式 指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:) 正例： 反例： 2.1.4 标签顺序保持一致 单文件组件应该总是让标签顺序保持为 正例： ... ... ... 反例： ... ... ... 2.1.5 必须为 v-for 设置键值 key 2.1.6 v-show 与 v-if 选择 如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。 2.1.7 script 标签内部结构顺序 components > props > data > computed > watch > filter > 钩子函数（钩子函数按其执行顺序） > methods 2.1.8 Vue Router 规范 1) 页面跳转数据传递使用路由参数 页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。 正例： let id = ' 123'; this.$router.push({ name: 'userCenter', query: { id: id } }); 2) 使用路由懒加载（延迟加载）机制 { path: '/uploadAttachment', name: 'uploadAttachment', meta: { title: '上传附件' }, component: () => import('@/view/components/uploadAttachment/index.vue') }, 3) router 中的命名规范 path、childrenPoints 命名规范采用kebab-case命名规范（尽量vue文件的目录结构保持一致，因为目录、文件名都是kebab-case，这样很方便找到对应的文件） name 命名规范采用KebabCase命名规范且和component组件名保持一致！（因为要保持keep-alive特性，keep-alive按照component的name进行缓存，所以两者必须高度保持一致） // 动态加载 export const reload = [ { path: '/reload', name: 'reload', component: Main, meta: { title: '动态加载', icon: 'icon iconfont' }, children: &#91; { path: '/reload/smart-reload-list', name: 'SmartReloadList', meta: { title: 'SmartReload', childrenPoints: &#91; { title: '查询', name: 'smart-reload-search' }, { title: '执行reload', name: 'smart-reload-update' }, { title: '查看执行结果', name: 'smart-reload-result' } ] }, component: () =&gt; import('@/views/reload/smart-reload/smart-reload-list.vue') } ] } ]; 4) router 中的 path 命名规范 path除了采用kebab-case命名规范以外，必须以 / 开头，即使是children里的path也要以 / 开头。如下示例 目的： 经常有这样的场景：某个页面有问题，要立刻找到这个vue文件，如果不用以/开头，path为parent和children组成的，可能经常需要在router文件里搜索多次才能找到，而如果以/开头，则能立刻搜索到对应的组件 { path: '/file', name: 'File', component: Main, meta: { title: '文件服务', icon: 'ios-cloud-upload' }, children: [ { path: '/file/file-list', name: 'FileList', component: () => import('@/views/file/file-list.vue') }, { path: '/file/file-add', name: 'FileAdd', component: () => import('@/views/file/file-add.vue') }, { path: '/file/file-update', name: 'FileUpdate', component: () => import('@/views/file/file-update.vue') } ] } (二) Vue 项目目录规范 2.2.1 基础 vue 项目中的所有命名一定要与后端命名统一。 比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！ 2.2.2 使用 Vue-cli 脚手架 使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。 2.2.3 目录说明 目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。 src 源码目录 |-- api 所有api接口 |-- assets 静态资源，images, icons, styles等 |-- components 公用组件 |-- config 配置信息 |-- constants 常量信息，项目所有Enum, 全局常量等 |-- directives 自定义指令 |-- filters 过滤器，全局工具 |-- datas 模拟数据，临时存放 |-- lib 外部引用的插件存放及修改文件 |-- mock 模拟接口，临时存放 |-- plugins 插件，全局使用 |-- router 路由，统一管理 |-- store vuex, 统一管理 |-- themes 自定义样式主题 |-- views 视图目录 | |-- role role模块名 | |-- |-- role-list.vue role列表页面 | |-- |-- role-add.vue role新建页面 | |-- |-- role-update.vue role更新页面 | |-- |-- index.less role模块样式 | |-- |-- components role模块通用组件文件夹 | |-- employee employee模块 1) api 目录 文件、变量命名要与后端保持一致。 此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。 api 中的方法名字要与后端 api url 尽量保持语义高度一致性。 对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。 正例： 后端 url： EmployeeController.java /employee/add /employee/delete/{id} /employee/update 前端： employee.js // 添加员工 addEmployee: (data) => { return postAxios('/employee/add', data) }, // 更新员工信息 updateEmployee: (data) => { return postAxios('/employee/update', data) }, // 删除员工 deleteEmployee: (employeeId) => { return postAxios('/employee/delete/' + employeeId) }, 2) assets 目录 assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case |assets |-- icons |-- images | |-- background-color.png | |-- upload-header.png |-- styles 3) components 目录 此目录应按照组件进行目录划分，目录命名为 kebab-case，组件命名规则也为 kebab-case |components |-- error-log | |-- index.vue | |-- index.less |-- markdown-editor | |-- index.vue | |-- index.js |-- kebab-case 4) constants 目录 此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(https://www.npmjs.com/package/vue-enum) 目录结构： |constants |-- index.js |-- role.js |-- employee.js 例子： employee.js export const EMPLOYEE_STATUS = { NORMAL: { value: 1, desc: '正常' }, DISABLED: { value: 1, desc: '禁用' }, DELETED: { value: 2, desc: '已删除' } }; export const EMPLOYEE_ACCOUNT_TYPE = { QQ: { value: 1, desc: 'QQ登录' }, WECHAT: { value: 2, desc: '微信登录' }, DINGDING: { value: 3, desc: '钉钉登录' }, USERNAME: { value: 4, desc: '用户名密码登录' } }; export default { EMPLOYEE_STATUS, EMPLOYEE_ACCOUNT_TYPE }; 5) router 与 store 目录 这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。 router 尽量按照 views 中的结构保持一致 store 按照业务进行拆分不同的 js 文件 6) views 目录 命名要与后端、router、api 等保持一致 components 中组件要使用 PascalCase 规则 |-- views 视图目录 | |-- role role模块名 | | |-- role-list.vue role列表页面 | | |-- role-add.vue role新建页面 | | |-- role-update.vue role更新页面 | | |-- index.less role模块样式 | | |-- components role模块通用组件文件夹 | | | |-- role-header.vue role头部组件 | | | |-- role-modal.vue role弹出框组件 | |-- employee employee模块 | |-- behavior-log 行为日志log模块 | |-- code-generator 代码生成器模块 2.2.4 注释说明 整理必须加注释的地方 公共组件使用说明 api 目录的接口 js 文件必须加注释 store 中的 state, mutation, action 等必须加注释 vue 文件中的 template 必须加注释，若文件较大添加 start end 注释 vue 文件的 methods，每个 method 必须添加注释 vue 文件的 data, 非常见单词要加注释 2.2.5 其他 1) 尽量不要手动操作 DOM 因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。 2) 删除无用代码 因使用了 git/svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:25:22 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"CODE.html":{"url":"CODE.html","title":"代码结构","keywords":"","body":"代码结构 后端 lekshop-parent ├── lekshop-common -- 工具类及通用代码 ├── lekshop-mbg -- MyBatisGenerator生成的数据库操作代码 ├── lekshop-security -- SpringSecurity封装公用模块 ├── lekshop-admin -- 运营后台商城管理系统接口 ├── lekshop-shop -- 商家后台商城管理系统接口 ├── lekshop-portal -- 前台商城系统接口 ├── lekshop-netty -- 基于Netty的消息中心, 主要用于IM和推送 └── lekshop-service -- 接口业务逻辑 前端 lekshop_ui_admin：运营后台 lekshop_ui_shop：商家后台 lekshop_ui_portal：买家 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:36:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"params/WECHAT.html":{"url":"params/WECHAT.html","title":"微信配置","keywords":"","body":"微信配置 支付参数 appId ： APP应用ID mpAppId ： 小程序应用ID serviceAppId ： 公众号应用ID mchId ： 商户号 apiKey3 ：APIv3密钥 apiclient_cert_p12 ：API证书中后缀名为.p12文件 apiclient_cert_pem ：API证书中后缀名为.pem文件 apiclient_key ： 客户端密钥，API证书中的：apiclient_key文件。 serialNumber ：证书序列号 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:26:14 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"params/QINIU.html":{"url":"params/QINIU.html","title":"七牛云","keywords":"","body":"七牛云 配置参数 accessKey KEY secretKey 密钥 imgZone 区域 imgBucket 空间名称 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:28:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"params/ALI.html":{"url":"params/ALI.html","title":"阿里云短信","keywords":"","body":"阿里云短信 配置参数 signName：短信签名 accessKeyId：阿里云密钥 accessKeySecret：阿里云密钥 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:26:29 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"OTHER.html":{"url":"OTHER.html","title":"其他","keywords":"","body":"其他 我们的联系方式 Copyright © LEKSHOP 2022 all right reserved，powered by Gitbook该文章修订时间： 2022-12-02 16:30:28 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}